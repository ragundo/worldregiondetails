// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../include/world_region_details_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto() {
  delete DF_coord2d::default_instance_;
  delete DF_wrd_T_edges::default_instance_;
  delete DF_wrd_T_rivers_vertical::default_instance_;
  delete DF_wrd_T_rivers_horizontal::default_instance_;
  delete DF_world_region_details_result::default_instance_;
}

void protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  DF_coord2d::default_instance_ = new DF_coord2d();
  DF_wrd_T_edges::default_instance_ = new DF_wrd_T_edges();
  DF_wrd_T_rivers_vertical::default_instance_ = new DF_wrd_T_rivers_vertical();
  DF_wrd_T_rivers_horizontal::default_instance_ = new DF_wrd_T_rivers_horizontal();
  DF_world_region_details_result::default_instance_ = new DF_world_region_details_result();
  DF_coord2d::default_instance_->InitAsDefaultInstance();
  DF_wrd_T_edges::default_instance_->InitAsDefaultInstance();
  DF_wrd_T_rivers_vertical::default_instance_->InitAsDefaultInstance();
  DF_wrd_T_rivers_horizontal::default_instance_->InitAsDefaultInstance();
  DF_world_region_details_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_world_5fregion_5fdetails_5fresult_2eproto {
  StaticDescriptorInitializer_world_5fregion_5fdetails_5fresult_2eproto() {
    protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();
  }
} static_descriptor_initializer_world_5fregion_5fdetails_5fresult_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DF_coord2d::kPosXFieldNumber;
const int DF_coord2d::kPosYFieldNumber;
#endif  // !_MSC_VER

DF_coord2d::DF_coord2d()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DF_coord2d::InitAsDefaultInstance() {
}

DF_coord2d::DF_coord2d(const DF_coord2d& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DF_coord2d::SharedCtor() {
  _cached_size_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DF_coord2d::~DF_coord2d() {
  SharedDtor();
}

void DF_coord2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DF_coord2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DF_coord2d& DF_coord2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();  return *default_instance_;
}

DF_coord2d* DF_coord2d::default_instance_ = NULL;

DF_coord2d* DF_coord2d::New() const {
  return new DF_coord2d;
}

void DF_coord2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_x_ = 0;
    pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DF_coord2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_y;
        break;
      }
      
      // required int32 pos_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DF_coord2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos_x = 1;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_x(), output);
  }
  
  // required int32 pos_y = 2;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_y(), output);
  }
  
}

int DF_coord2d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos_x = 1;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }
    
    // required int32 pos_y = 2;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DF_coord2d::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DF_coord2d*>(&from));
}

void DF_coord2d::MergeFrom(const DF_coord2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
}

void DF_coord2d::CopyFrom(const DF_coord2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DF_coord2d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DF_coord2d::Swap(DF_coord2d* other) {
  if (other != this) {
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DF_coord2d::GetTypeName() const {
  return "DF_coord2d";
}


// ===================================================================

#ifndef _MSC_VER
const int DF_wrd_T_edges::kSplitXFieldNumber;
const int DF_wrd_T_edges::kSplitYFieldNumber;
const int DF_wrd_T_edges::kBiomeCornerFieldNumber;
const int DF_wrd_T_edges::kBiomeXFieldNumber;
const int DF_wrd_T_edges::kBiomeYFieldNumber;
#endif  // !_MSC_VER

DF_wrd_T_edges::DF_wrd_T_edges()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DF_wrd_T_edges::InitAsDefaultInstance() {
}

DF_wrd_T_edges::DF_wrd_T_edges(const DF_wrd_T_edges& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DF_wrd_T_edges::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DF_wrd_T_edges::~DF_wrd_T_edges() {
  SharedDtor();
}

void DF_wrd_T_edges::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DF_wrd_T_edges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DF_wrd_T_edges& DF_wrd_T_edges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();  return *default_instance_;
}

DF_wrd_T_edges* DF_wrd_T_edges::default_instance_ = NULL;

DF_wrd_T_edges* DF_wrd_T_edges::New() const {
  return new DF_wrd_T_edges;
}

void DF_wrd_T_edges::Clear() {
  split_x_.Clear();
  split_y_.Clear();
  biome_corner_.Clear();
  biome_x_.Clear();
  biome_y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DF_wrd_T_edges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DF_coord2d split_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_split_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_split_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_split_x;
        if (input->ExpectTag(18)) goto parse_split_y;
        break;
      }
      
      // repeated .DF_coord2d split_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_split_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_split_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_split_y;
        if (input->ExpectTag(24)) goto parse_biome_corner;
        break;
      }
      
      // repeated int32 biome_corner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_biome_corner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_biome_corner())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_biome_corner())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_biome_corner;
        if (input->ExpectTag(32)) goto parse_biome_x;
        break;
      }
      
      // repeated int32 biome_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_biome_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_biome_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_biome_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_biome_x;
        if (input->ExpectTag(40)) goto parse_biome_y;
        break;
      }
      
      // repeated int32 biome_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_biome_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_biome_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_biome_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_biome_y;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DF_wrd_T_edges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DF_coord2d split_x = 1;
  for (int i = 0; i < this->split_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->split_x(i), output);
  }
  
  // repeated .DF_coord2d split_y = 2;
  for (int i = 0; i < this->split_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->split_y(i), output);
  }
  
  // repeated int32 biome_corner = 3;
  for (int i = 0; i < this->biome_corner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->biome_corner(i), output);
  }
  
  // repeated int32 biome_x = 4;
  for (int i = 0; i < this->biome_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->biome_x(i), output);
  }
  
  // repeated int32 biome_y = 5;
  for (int i = 0; i < this->biome_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->biome_y(i), output);
  }
  
}

int DF_wrd_T_edges::ByteSize() const {
  int total_size = 0;
  
  // repeated .DF_coord2d split_x = 1;
  total_size += 1 * this->split_x_size();
  for (int i = 0; i < this->split_x_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->split_x(i));
  }
  
  // repeated .DF_coord2d split_y = 2;
  total_size += 1 * this->split_y_size();
  for (int i = 0; i < this->split_y_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->split_y(i));
  }
  
  // repeated int32 biome_corner = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->biome_corner_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->biome_corner(i));
    }
    total_size += 1 * this->biome_corner_size() + data_size;
  }
  
  // repeated int32 biome_x = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->biome_x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->biome_x(i));
    }
    total_size += 1 * this->biome_x_size() + data_size;
  }
  
  // repeated int32 biome_y = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->biome_y_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->biome_y(i));
    }
    total_size += 1 * this->biome_y_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DF_wrd_T_edges::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DF_wrd_T_edges*>(&from));
}

void DF_wrd_T_edges::MergeFrom(const DF_wrd_T_edges& from) {
  GOOGLE_CHECK_NE(&from, this);
  split_x_.MergeFrom(from.split_x_);
  split_y_.MergeFrom(from.split_y_);
  biome_corner_.MergeFrom(from.biome_corner_);
  biome_x_.MergeFrom(from.biome_x_);
  biome_y_.MergeFrom(from.biome_y_);
}

void DF_wrd_T_edges::CopyFrom(const DF_wrd_T_edges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DF_wrd_T_edges::IsInitialized() const {
  
  for (int i = 0; i < split_x_size(); i++) {
    if (!this->split_x(i).IsInitialized()) return false;
  }
  for (int i = 0; i < split_y_size(); i++) {
    if (!this->split_y(i).IsInitialized()) return false;
  }
  return true;
}

void DF_wrd_T_edges::Swap(DF_wrd_T_edges* other) {
  if (other != this) {
    split_x_.Swap(&other->split_x_);
    split_y_.Swap(&other->split_y_);
    biome_corner_.Swap(&other->biome_corner_);
    biome_x_.Swap(&other->biome_x_);
    biome_y_.Swap(&other->biome_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DF_wrd_T_edges::GetTypeName() const {
  return "DF_wrd_T_edges";
}


// ===================================================================

#ifndef _MSC_VER
const int DF_wrd_T_rivers_vertical::kXMinFieldNumber;
const int DF_wrd_T_rivers_vertical::kXMaxFieldNumber;
const int DF_wrd_T_rivers_vertical::kActiveFieldNumber;
const int DF_wrd_T_rivers_vertical::kElevationFieldNumber;
#endif  // !_MSC_VER

DF_wrd_T_rivers_vertical::DF_wrd_T_rivers_vertical()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DF_wrd_T_rivers_vertical::InitAsDefaultInstance() {
}

DF_wrd_T_rivers_vertical::DF_wrd_T_rivers_vertical(const DF_wrd_T_rivers_vertical& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DF_wrd_T_rivers_vertical::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DF_wrd_T_rivers_vertical::~DF_wrd_T_rivers_vertical() {
  SharedDtor();
}

void DF_wrd_T_rivers_vertical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DF_wrd_T_rivers_vertical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DF_wrd_T_rivers_vertical& DF_wrd_T_rivers_vertical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();  return *default_instance_;
}

DF_wrd_T_rivers_vertical* DF_wrd_T_rivers_vertical::default_instance_ = NULL;

DF_wrd_T_rivers_vertical* DF_wrd_T_rivers_vertical::New() const {
  return new DF_wrd_T_rivers_vertical;
}

void DF_wrd_T_rivers_vertical::Clear() {
  x_min_.Clear();
  x_max_.Clear();
  active_.Clear();
  elevation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DF_wrd_T_rivers_vertical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 x_min = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_x_min())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_x_min())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_x_min;
        if (input->ExpectTag(16)) goto parse_x_max;
        break;
      }
      
      // repeated int32 x_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_x_max())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_x_max())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x_max;
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }
      
      // repeated int32 active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_active())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_active())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        if (input->ExpectTag(32)) goto parse_elevation;
        break;
      }
      
      // repeated int32 elevation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_elevation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_elevation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elevation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DF_wrd_T_rivers_vertical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 x_min = 1;
  for (int i = 0; i < this->x_min_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->x_min(i), output);
  }
  
  // repeated int32 x_max = 2;
  for (int i = 0; i < this->x_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->x_max(i), output);
  }
  
  // repeated int32 active = 3;
  for (int i = 0; i < this->active_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->active(i), output);
  }
  
  // repeated int32 elevation = 4;
  for (int i = 0; i < this->elevation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->elevation(i), output);
  }
  
}

int DF_wrd_T_rivers_vertical::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 x_min = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->x_min_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->x_min(i));
    }
    total_size += 1 * this->x_min_size() + data_size;
  }
  
  // repeated int32 x_max = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->x_max_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->x_max(i));
    }
    total_size += 1 * this->x_max_size() + data_size;
  }
  
  // repeated int32 active = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->active(i));
    }
    total_size += 1 * this->active_size() + data_size;
  }
  
  // repeated int32 elevation = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->elevation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->elevation(i));
    }
    total_size += 1 * this->elevation_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DF_wrd_T_rivers_vertical::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DF_wrd_T_rivers_vertical*>(&from));
}

void DF_wrd_T_rivers_vertical::MergeFrom(const DF_wrd_T_rivers_vertical& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_min_.MergeFrom(from.x_min_);
  x_max_.MergeFrom(from.x_max_);
  active_.MergeFrom(from.active_);
  elevation_.MergeFrom(from.elevation_);
}

void DF_wrd_T_rivers_vertical::CopyFrom(const DF_wrd_T_rivers_vertical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DF_wrd_T_rivers_vertical::IsInitialized() const {
  
  return true;
}

void DF_wrd_T_rivers_vertical::Swap(DF_wrd_T_rivers_vertical* other) {
  if (other != this) {
    x_min_.Swap(&other->x_min_);
    x_max_.Swap(&other->x_max_);
    active_.Swap(&other->active_);
    elevation_.Swap(&other->elevation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DF_wrd_T_rivers_vertical::GetTypeName() const {
  return "DF_wrd_T_rivers_vertical";
}


// ===================================================================

#ifndef _MSC_VER
const int DF_wrd_T_rivers_horizontal::kYMinFieldNumber;
const int DF_wrd_T_rivers_horizontal::kYMaxFieldNumber;
const int DF_wrd_T_rivers_horizontal::kActiveFieldNumber;
const int DF_wrd_T_rivers_horizontal::kElevationFieldNumber;
#endif  // !_MSC_VER

DF_wrd_T_rivers_horizontal::DF_wrd_T_rivers_horizontal()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DF_wrd_T_rivers_horizontal::InitAsDefaultInstance() {
}

DF_wrd_T_rivers_horizontal::DF_wrd_T_rivers_horizontal(const DF_wrd_T_rivers_horizontal& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DF_wrd_T_rivers_horizontal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DF_wrd_T_rivers_horizontal::~DF_wrd_T_rivers_horizontal() {
  SharedDtor();
}

void DF_wrd_T_rivers_horizontal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DF_wrd_T_rivers_horizontal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DF_wrd_T_rivers_horizontal& DF_wrd_T_rivers_horizontal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();  return *default_instance_;
}

DF_wrd_T_rivers_horizontal* DF_wrd_T_rivers_horizontal::default_instance_ = NULL;

DF_wrd_T_rivers_horizontal* DF_wrd_T_rivers_horizontal::New() const {
  return new DF_wrd_T_rivers_horizontal;
}

void DF_wrd_T_rivers_horizontal::Clear() {
  y_min_.Clear();
  y_max_.Clear();
  active_.Clear();
  elevation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DF_wrd_T_rivers_horizontal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 y_min = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_y_min())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_y_min())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_y_min;
        if (input->ExpectTag(16)) goto parse_y_max;
        break;
      }
      
      // repeated int32 y_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_y_max())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_y_max())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y_max;
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }
      
      // repeated int32 active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_active())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_active())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        if (input->ExpectTag(32)) goto parse_elevation;
        break;
      }
      
      // repeated int32 elevation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_elevation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_elevation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elevation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DF_wrd_T_rivers_horizontal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 y_min = 1;
  for (int i = 0; i < this->y_min_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->y_min(i), output);
  }
  
  // repeated int32 y_max = 2;
  for (int i = 0; i < this->y_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->y_max(i), output);
  }
  
  // repeated int32 active = 3;
  for (int i = 0; i < this->active_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->active(i), output);
  }
  
  // repeated int32 elevation = 4;
  for (int i = 0; i < this->elevation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->elevation(i), output);
  }
  
}

int DF_wrd_T_rivers_horizontal::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 y_min = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->y_min_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->y_min(i));
    }
    total_size += 1 * this->y_min_size() + data_size;
  }
  
  // repeated int32 y_max = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->y_max_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->y_max(i));
    }
    total_size += 1 * this->y_max_size() + data_size;
  }
  
  // repeated int32 active = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->active_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->active(i));
    }
    total_size += 1 * this->active_size() + data_size;
  }
  
  // repeated int32 elevation = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->elevation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->elevation(i));
    }
    total_size += 1 * this->elevation_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DF_wrd_T_rivers_horizontal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DF_wrd_T_rivers_horizontal*>(&from));
}

void DF_wrd_T_rivers_horizontal::MergeFrom(const DF_wrd_T_rivers_horizontal& from) {
  GOOGLE_CHECK_NE(&from, this);
  y_min_.MergeFrom(from.y_min_);
  y_max_.MergeFrom(from.y_max_);
  active_.MergeFrom(from.active_);
  elevation_.MergeFrom(from.elevation_);
}

void DF_wrd_T_rivers_horizontal::CopyFrom(const DF_wrd_T_rivers_horizontal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DF_wrd_T_rivers_horizontal::IsInitialized() const {
  
  return true;
}

void DF_wrd_T_rivers_horizontal::Swap(DF_wrd_T_rivers_horizontal* other) {
  if (other != this) {
    y_min_.Swap(&other->y_min_);
    y_max_.Swap(&other->y_max_);
    active_.Swap(&other->active_);
    elevation_.Swap(&other->elevation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DF_wrd_T_rivers_horizontal::GetTypeName() const {
  return "DF_wrd_T_rivers_horizontal";
}


// ===================================================================

#ifndef _MSC_VER
const int DF_world_region_details_result::kBiomeFieldNumber;
const int DF_world_region_details_result::kElevationFieldNumber;
const int DF_world_region_details_result::kEdgesFieldNumber;
const int DF_world_region_details_result::kPosFieldNumber;
const int DF_world_region_details_result::kRiversVerticalFieldNumber;
const int DF_world_region_details_result::kRiversHorizontalFieldNumber;
const int DF_world_region_details_result::kLavaStoneFieldNumber;
const int DF_world_region_details_result::kElevation2FieldNumber;
#endif  // !_MSC_VER

DF_world_region_details_result::DF_world_region_details_result()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DF_world_region_details_result::InitAsDefaultInstance() {
  edges_ = const_cast< ::DF_wrd_T_edges*>(&::DF_wrd_T_edges::default_instance());
  pos_ = const_cast< ::DF_coord2d*>(&::DF_coord2d::default_instance());
  rivers_vertical_ = const_cast< ::DF_wrd_T_rivers_vertical*>(&::DF_wrd_T_rivers_vertical::default_instance());
  rivers_horizontal_ = const_cast< ::DF_wrd_T_rivers_horizontal*>(&::DF_wrd_T_rivers_horizontal::default_instance());
}

DF_world_region_details_result::DF_world_region_details_result(const DF_world_region_details_result& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DF_world_region_details_result::SharedCtor() {
  _cached_size_ = 0;
  edges_ = NULL;
  pos_ = NULL;
  rivers_vertical_ = NULL;
  rivers_horizontal_ = NULL;
  lava_stone_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DF_world_region_details_result::~DF_world_region_details_result() {
  SharedDtor();
}

void DF_world_region_details_result::SharedDtor() {
  if (this != default_instance_) {
    delete edges_;
    delete pos_;
    delete rivers_vertical_;
    delete rivers_horizontal_;
  }
}

void DF_world_region_details_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DF_world_region_details_result& DF_world_region_details_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();  return *default_instance_;
}

DF_world_region_details_result* DF_world_region_details_result::default_instance_ = NULL;

DF_world_region_details_result* DF_world_region_details_result::New() const {
  return new DF_world_region_details_result;
}

void DF_world_region_details_result::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_edges()) {
      if (edges_ != NULL) edges_->::DF_wrd_T_edges::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::DF_coord2d::Clear();
    }
    if (has_rivers_vertical()) {
      if (rivers_vertical_ != NULL) rivers_vertical_->::DF_wrd_T_rivers_vertical::Clear();
    }
    if (has_rivers_horizontal()) {
      if (rivers_horizontal_ != NULL) rivers_horizontal_->::DF_wrd_T_rivers_horizontal::Clear();
    }
    lava_stone_ = 0;
  }
  biome_.Clear();
  elevation_.Clear();
  elevation2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DF_world_region_details_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 biome = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_biome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_biome())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_biome())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_biome;
        if (input->ExpectTag(16)) goto parse_elevation;
        break;
      }
      
      // repeated int32 elevation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_elevation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_elevation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elevation;
        if (input->ExpectTag(34)) goto parse_edges;
        break;
      }
      
      // required .DF_wrd_T_edges edges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .DF_coord2d pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rivers_vertical;
        break;
      }
      
      // required .DF_wrd_T_rivers_vertical rivers_vertical = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rivers_vertical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rivers_vertical()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rivers_horizontal;
        break;
      }
      
      // required .DF_wrd_T_rivers_horizontal rivers_horizontal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rivers_horizontal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rivers_horizontal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lava_stone;
        break;
      }
      
      // required int32 lava_stone = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lava_stone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lava_stone_)));
          set_has_lava_stone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_elevation2;
        break;
      }
      
      // repeated int32 elevation2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elevation2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_elevation2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_elevation2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_elevation2;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DF_world_region_details_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 biome = 1;
  for (int i = 0; i < this->biome_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->biome(i), output);
  }
  
  // repeated int32 elevation = 2;
  for (int i = 0; i < this->elevation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->elevation(i), output);
  }
  
  // required .DF_wrd_T_edges edges = 4;
  if (has_edges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->edges(), output);
  }
  
  // required .DF_coord2d pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->pos(), output);
  }
  
  // required .DF_wrd_T_rivers_vertical rivers_vertical = 6;
  if (has_rivers_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->rivers_vertical(), output);
  }
  
  // required .DF_wrd_T_rivers_horizontal rivers_horizontal = 7;
  if (has_rivers_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->rivers_horizontal(), output);
  }
  
  // required int32 lava_stone = 8;
  if (has_lava_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lava_stone(), output);
  }
  
  // repeated int32 elevation2 = 9;
  for (int i = 0; i < this->elevation2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->elevation2(i), output);
  }
  
}

int DF_world_region_details_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .DF_wrd_T_edges edges = 4;
    if (has_edges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges());
    }
    
    // required .DF_coord2d pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required .DF_wrd_T_rivers_vertical rivers_vertical = 6;
    if (has_rivers_vertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rivers_vertical());
    }
    
    // required .DF_wrd_T_rivers_horizontal rivers_horizontal = 7;
    if (has_rivers_horizontal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rivers_horizontal());
    }
    
    // required int32 lava_stone = 8;
    if (has_lava_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lava_stone());
    }
    
  }
  // repeated int32 biome = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->biome_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->biome(i));
    }
    total_size += 1 * this->biome_size() + data_size;
  }
  
  // repeated int32 elevation = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->elevation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->elevation(i));
    }
    total_size += 1 * this->elevation_size() + data_size;
  }
  
  // repeated int32 elevation2 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->elevation2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->elevation2(i));
    }
    total_size += 1 * this->elevation2_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DF_world_region_details_result::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DF_world_region_details_result*>(&from));
}

void DF_world_region_details_result::MergeFrom(const DF_world_region_details_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  biome_.MergeFrom(from.biome_);
  elevation_.MergeFrom(from.elevation_);
  elevation2_.MergeFrom(from.elevation2_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_edges()) {
      mutable_edges()->::DF_wrd_T_edges::MergeFrom(from.edges());
    }
    if (from.has_pos()) {
      mutable_pos()->::DF_coord2d::MergeFrom(from.pos());
    }
    if (from.has_rivers_vertical()) {
      mutable_rivers_vertical()->::DF_wrd_T_rivers_vertical::MergeFrom(from.rivers_vertical());
    }
    if (from.has_rivers_horizontal()) {
      mutable_rivers_horizontal()->::DF_wrd_T_rivers_horizontal::MergeFrom(from.rivers_horizontal());
    }
    if (from.has_lava_stone()) {
      set_lava_stone(from.lava_stone());
    }
  }
}

void DF_world_region_details_result::CopyFrom(const DF_world_region_details_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DF_world_region_details_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007c) != 0x0000007c) return false;
  
  if (has_edges()) {
    if (!this->edges().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void DF_world_region_details_result::Swap(DF_world_region_details_result* other) {
  if (other != this) {
    biome_.Swap(&other->biome_);
    elevation_.Swap(&other->elevation_);
    std::swap(edges_, other->edges_);
    std::swap(pos_, other->pos_);
    std::swap(rivers_vertical_, other->rivers_vertical_);
    std::swap(rivers_horizontal_, other->rivers_horizontal_);
    std::swap(lava_stone_, other->lava_stone_);
    elevation2_.Swap(&other->elevation2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DF_world_region_details_result::GetTypeName() const {
  return "DF_world_region_details_result";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
