// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_region_details_result.proto

#ifndef PROTOBUF_world_5fregion_5fdetails_5fresult_2eproto__INCLUDED
#define PROTOBUF_world_5fregion_5fdetails_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();
void protobuf_AssignDesc_world_5fregion_5fdetails_5fresult_2eproto();
void protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto();

class DF_coord2d;
class DF_wrd_T_edges;
class DF_wrd_T_rivers_vertical;
class DF_wrd_T_rivers_horizontal;
class DF_world_region_details_result;

// ===================================================================

class DF_coord2d : public ::google::protobuf::MessageLite {
 public:
  DF_coord2d();
  virtual ~DF_coord2d();
  
  DF_coord2d(const DF_coord2d& from);
  
  inline DF_coord2d& operator=(const DF_coord2d& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DF_coord2d& default_instance();
  
  void Swap(DF_coord2d* other);
  
  // implements Message ----------------------------------------------
  
  DF_coord2d* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DF_coord2d& from);
  void MergeFrom(const DF_coord2d& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pos_x = 1;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);
  
  // required int32 pos_y = 2;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DF_coord2d)
 private:
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_AssignDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto();
  
  void InitAsDefaultInstance();
  static DF_coord2d* default_instance_;
};
// -------------------------------------------------------------------

class DF_wrd_T_edges : public ::google::protobuf::MessageLite {
 public:
  DF_wrd_T_edges();
  virtual ~DF_wrd_T_edges();
  
  DF_wrd_T_edges(const DF_wrd_T_edges& from);
  
  inline DF_wrd_T_edges& operator=(const DF_wrd_T_edges& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DF_wrd_T_edges& default_instance();
  
  void Swap(DF_wrd_T_edges* other);
  
  // implements Message ----------------------------------------------
  
  DF_wrd_T_edges* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DF_wrd_T_edges& from);
  void MergeFrom(const DF_wrd_T_edges& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DF_coord2d split_x = 1;
  inline int split_x_size() const;
  inline void clear_split_x();
  static const int kSplitXFieldNumber = 1;
  inline const ::DF_coord2d& split_x(int index) const;
  inline ::DF_coord2d* mutable_split_x(int index);
  inline ::DF_coord2d* add_split_x();
  inline const ::google::protobuf::RepeatedPtrField< ::DF_coord2d >&
      split_x() const;
  inline ::google::protobuf::RepeatedPtrField< ::DF_coord2d >*
      mutable_split_x();
  
  // repeated .DF_coord2d split_y = 2;
  inline int split_y_size() const;
  inline void clear_split_y();
  static const int kSplitYFieldNumber = 2;
  inline const ::DF_coord2d& split_y(int index) const;
  inline ::DF_coord2d* mutable_split_y(int index);
  inline ::DF_coord2d* add_split_y();
  inline const ::google::protobuf::RepeatedPtrField< ::DF_coord2d >&
      split_y() const;
  inline ::google::protobuf::RepeatedPtrField< ::DF_coord2d >*
      mutable_split_y();
  
  // repeated int32 biome_corner = 3;
  inline int biome_corner_size() const;
  inline void clear_biome_corner();
  static const int kBiomeCornerFieldNumber = 3;
  inline ::google::protobuf::int32 biome_corner(int index) const;
  inline void set_biome_corner(int index, ::google::protobuf::int32 value);
  inline void add_biome_corner(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      biome_corner() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_biome_corner();
  
  // repeated int32 biome_x = 4;
  inline int biome_x_size() const;
  inline void clear_biome_x();
  static const int kBiomeXFieldNumber = 4;
  inline ::google::protobuf::int32 biome_x(int index) const;
  inline void set_biome_x(int index, ::google::protobuf::int32 value);
  inline void add_biome_x(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      biome_x() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_biome_x();
  
  // repeated int32 biome_y = 5;
  inline int biome_y_size() const;
  inline void clear_biome_y();
  static const int kBiomeYFieldNumber = 5;
  inline ::google::protobuf::int32 biome_y(int index) const;
  inline void set_biome_y(int index, ::google::protobuf::int32 value);
  inline void add_biome_y(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      biome_y() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_biome_y();
  
  // @@protoc_insertion_point(class_scope:DF_wrd_T_edges)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::DF_coord2d > split_x_;
  ::google::protobuf::RepeatedPtrField< ::DF_coord2d > split_y_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > biome_corner_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > biome_x_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > biome_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_AssignDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto();
  
  void InitAsDefaultInstance();
  static DF_wrd_T_edges* default_instance_;
};
// -------------------------------------------------------------------

class DF_wrd_T_rivers_vertical : public ::google::protobuf::MessageLite {
 public:
  DF_wrd_T_rivers_vertical();
  virtual ~DF_wrd_T_rivers_vertical();
  
  DF_wrd_T_rivers_vertical(const DF_wrd_T_rivers_vertical& from);
  
  inline DF_wrd_T_rivers_vertical& operator=(const DF_wrd_T_rivers_vertical& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DF_wrd_T_rivers_vertical& default_instance();
  
  void Swap(DF_wrd_T_rivers_vertical* other);
  
  // implements Message ----------------------------------------------
  
  DF_wrd_T_rivers_vertical* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DF_wrd_T_rivers_vertical& from);
  void MergeFrom(const DF_wrd_T_rivers_vertical& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 x_min = 1;
  inline int x_min_size() const;
  inline void clear_x_min();
  static const int kXMinFieldNumber = 1;
  inline ::google::protobuf::int32 x_min(int index) const;
  inline void set_x_min(int index, ::google::protobuf::int32 value);
  inline void add_x_min(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      x_min() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_x_min();
  
  // repeated int32 x_max = 2;
  inline int x_max_size() const;
  inline void clear_x_max();
  static const int kXMaxFieldNumber = 2;
  inline ::google::protobuf::int32 x_max(int index) const;
  inline void set_x_max(int index, ::google::protobuf::int32 value);
  inline void add_x_max(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      x_max() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_x_max();
  
  // repeated int32 active = 3;
  inline int active_size() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 3;
  inline ::google::protobuf::int32 active(int index) const;
  inline void set_active(int index, ::google::protobuf::int32 value);
  inline void add_active(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      active() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_active();
  
  // repeated int32 elevation = 4;
  inline int elevation_size() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 4;
  inline ::google::protobuf::int32 elevation(int index) const;
  inline void set_elevation(int index, ::google::protobuf::int32 value);
  inline void add_elevation(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      elevation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_elevation();
  
  // @@protoc_insertion_point(class_scope:DF_wrd_T_rivers_vertical)
 private:
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > x_min_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > x_max_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > active_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > elevation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_AssignDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto();
  
  void InitAsDefaultInstance();
  static DF_wrd_T_rivers_vertical* default_instance_;
};
// -------------------------------------------------------------------

class DF_wrd_T_rivers_horizontal : public ::google::protobuf::MessageLite {
 public:
  DF_wrd_T_rivers_horizontal();
  virtual ~DF_wrd_T_rivers_horizontal();
  
  DF_wrd_T_rivers_horizontal(const DF_wrd_T_rivers_horizontal& from);
  
  inline DF_wrd_T_rivers_horizontal& operator=(const DF_wrd_T_rivers_horizontal& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DF_wrd_T_rivers_horizontal& default_instance();
  
  void Swap(DF_wrd_T_rivers_horizontal* other);
  
  // implements Message ----------------------------------------------
  
  DF_wrd_T_rivers_horizontal* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DF_wrd_T_rivers_horizontal& from);
  void MergeFrom(const DF_wrd_T_rivers_horizontal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 y_min = 1;
  inline int y_min_size() const;
  inline void clear_y_min();
  static const int kYMinFieldNumber = 1;
  inline ::google::protobuf::int32 y_min(int index) const;
  inline void set_y_min(int index, ::google::protobuf::int32 value);
  inline void add_y_min(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      y_min() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_y_min();
  
  // repeated int32 y_max = 2;
  inline int y_max_size() const;
  inline void clear_y_max();
  static const int kYMaxFieldNumber = 2;
  inline ::google::protobuf::int32 y_max(int index) const;
  inline void set_y_max(int index, ::google::protobuf::int32 value);
  inline void add_y_max(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      y_max() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_y_max();
  
  // repeated int32 active = 3;
  inline int active_size() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 3;
  inline ::google::protobuf::int32 active(int index) const;
  inline void set_active(int index, ::google::protobuf::int32 value);
  inline void add_active(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      active() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_active();
  
  // repeated int32 elevation = 4;
  inline int elevation_size() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 4;
  inline ::google::protobuf::int32 elevation(int index) const;
  inline void set_elevation(int index, ::google::protobuf::int32 value);
  inline void add_elevation(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      elevation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_elevation();
  
  // @@protoc_insertion_point(class_scope:DF_wrd_T_rivers_horizontal)
 private:
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > y_min_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > y_max_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > active_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > elevation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_AssignDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto();
  
  void InitAsDefaultInstance();
  static DF_wrd_T_rivers_horizontal* default_instance_;
};
// -------------------------------------------------------------------

class DF_world_region_details_result : public ::google::protobuf::MessageLite {
 public:
  DF_world_region_details_result();
  virtual ~DF_world_region_details_result();
  
  DF_world_region_details_result(const DF_world_region_details_result& from);
  
  inline DF_world_region_details_result& operator=(const DF_world_region_details_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DF_world_region_details_result& default_instance();
  
  void Swap(DF_world_region_details_result* other);
  
  // implements Message ----------------------------------------------
  
  DF_world_region_details_result* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DF_world_region_details_result& from);
  void MergeFrom(const DF_world_region_details_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 biome = 1;
  inline int biome_size() const;
  inline void clear_biome();
  static const int kBiomeFieldNumber = 1;
  inline ::google::protobuf::int32 biome(int index) const;
  inline void set_biome(int index, ::google::protobuf::int32 value);
  inline void add_biome(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      biome() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_biome();
  
  // repeated int32 elevation = 2;
  inline int elevation_size() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 2;
  inline ::google::protobuf::int32 elevation(int index) const;
  inline void set_elevation(int index, ::google::protobuf::int32 value);
  inline void add_elevation(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      elevation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_elevation();
  
  // required .DF_wrd_T_edges edges = 4;
  inline bool has_edges() const;
  inline void clear_edges();
  static const int kEdgesFieldNumber = 4;
  inline const ::DF_wrd_T_edges& edges() const;
  inline ::DF_wrd_T_edges* mutable_edges();
  inline ::DF_wrd_T_edges* release_edges();
  
  // required .DF_coord2d pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::DF_coord2d& pos() const;
  inline ::DF_coord2d* mutable_pos();
  inline ::DF_coord2d* release_pos();
  
  // required .DF_wrd_T_rivers_vertical rivers_vertical = 6;
  inline bool has_rivers_vertical() const;
  inline void clear_rivers_vertical();
  static const int kRiversVerticalFieldNumber = 6;
  inline const ::DF_wrd_T_rivers_vertical& rivers_vertical() const;
  inline ::DF_wrd_T_rivers_vertical* mutable_rivers_vertical();
  inline ::DF_wrd_T_rivers_vertical* release_rivers_vertical();
  
  // required .DF_wrd_T_rivers_horizontal rivers_horizontal = 7;
  inline bool has_rivers_horizontal() const;
  inline void clear_rivers_horizontal();
  static const int kRiversHorizontalFieldNumber = 7;
  inline const ::DF_wrd_T_rivers_horizontal& rivers_horizontal() const;
  inline ::DF_wrd_T_rivers_horizontal* mutable_rivers_horizontal();
  inline ::DF_wrd_T_rivers_horizontal* release_rivers_horizontal();
  
  // required int32 lava_stone = 8;
  inline bool has_lava_stone() const;
  inline void clear_lava_stone();
  static const int kLavaStoneFieldNumber = 8;
  inline ::google::protobuf::int32 lava_stone() const;
  inline void set_lava_stone(::google::protobuf::int32 value);
  
  // repeated int32 elevation2 = 9;
  inline int elevation2_size() const;
  inline void clear_elevation2();
  static const int kElevation2FieldNumber = 9;
  inline ::google::protobuf::int32 elevation2(int index) const;
  inline void set_elevation2(int index, ::google::protobuf::int32 value);
  inline void add_elevation2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      elevation2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_elevation2();
  
  // @@protoc_insertion_point(class_scope:DF_world_region_details_result)
 private:
  inline void set_has_edges();
  inline void clear_has_edges();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_rivers_vertical();
  inline void clear_has_rivers_vertical();
  inline void set_has_rivers_horizontal();
  inline void clear_has_rivers_horizontal();
  inline void set_has_lava_stone();
  inline void clear_has_lava_stone();
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > biome_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > elevation_;
  ::DF_wrd_T_edges* edges_;
  ::DF_coord2d* pos_;
  ::DF_wrd_T_rivers_vertical* rivers_vertical_;
  ::DF_wrd_T_rivers_horizontal* rivers_horizontal_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > elevation2_;
  ::google::protobuf::int32 lava_stone_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_AssignDesc_world_5fregion_5fdetails_5fresult_2eproto();
  friend void protobuf_ShutdownFile_world_5fregion_5fdetails_5fresult_2eproto();
  
  void InitAsDefaultInstance();
  static DF_world_region_details_result* default_instance_;
};
// ===================================================================


// ===================================================================

// DF_coord2d

// required int32 pos_x = 1;
inline bool DF_coord2d::has_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DF_coord2d::set_has_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DF_coord2d::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DF_coord2d::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 DF_coord2d::pos_x() const {
  return pos_x_;
}
inline void DF_coord2d::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
}

// required int32 pos_y = 2;
inline bool DF_coord2d::has_pos_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DF_coord2d::set_has_pos_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DF_coord2d::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DF_coord2d::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 DF_coord2d::pos_y() const {
  return pos_y_;
}
inline void DF_coord2d::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
}

// -------------------------------------------------------------------

// DF_wrd_T_edges

// repeated .DF_coord2d split_x = 1;
inline int DF_wrd_T_edges::split_x_size() const {
  return split_x_.size();
}
inline void DF_wrd_T_edges::clear_split_x() {
  split_x_.Clear();
}
inline const ::DF_coord2d& DF_wrd_T_edges::split_x(int index) const {
  return split_x_.Get(index);
}
inline ::DF_coord2d* DF_wrd_T_edges::mutable_split_x(int index) {
  return split_x_.Mutable(index);
}
inline ::DF_coord2d* DF_wrd_T_edges::add_split_x() {
  return split_x_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DF_coord2d >&
DF_wrd_T_edges::split_x() const {
  return split_x_;
}
inline ::google::protobuf::RepeatedPtrField< ::DF_coord2d >*
DF_wrd_T_edges::mutable_split_x() {
  return &split_x_;
}

// repeated .DF_coord2d split_y = 2;
inline int DF_wrd_T_edges::split_y_size() const {
  return split_y_.size();
}
inline void DF_wrd_T_edges::clear_split_y() {
  split_y_.Clear();
}
inline const ::DF_coord2d& DF_wrd_T_edges::split_y(int index) const {
  return split_y_.Get(index);
}
inline ::DF_coord2d* DF_wrd_T_edges::mutable_split_y(int index) {
  return split_y_.Mutable(index);
}
inline ::DF_coord2d* DF_wrd_T_edges::add_split_y() {
  return split_y_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DF_coord2d >&
DF_wrd_T_edges::split_y() const {
  return split_y_;
}
inline ::google::protobuf::RepeatedPtrField< ::DF_coord2d >*
DF_wrd_T_edges::mutable_split_y() {
  return &split_y_;
}

// repeated int32 biome_corner = 3;
inline int DF_wrd_T_edges::biome_corner_size() const {
  return biome_corner_.size();
}
inline void DF_wrd_T_edges::clear_biome_corner() {
  biome_corner_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_edges::biome_corner(int index) const {
  return biome_corner_.Get(index);
}
inline void DF_wrd_T_edges::set_biome_corner(int index, ::google::protobuf::int32 value) {
  biome_corner_.Set(index, value);
}
inline void DF_wrd_T_edges::add_biome_corner(::google::protobuf::int32 value) {
  biome_corner_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_edges::biome_corner() const {
  return biome_corner_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_edges::mutable_biome_corner() {
  return &biome_corner_;
}

// repeated int32 biome_x = 4;
inline int DF_wrd_T_edges::biome_x_size() const {
  return biome_x_.size();
}
inline void DF_wrd_T_edges::clear_biome_x() {
  biome_x_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_edges::biome_x(int index) const {
  return biome_x_.Get(index);
}
inline void DF_wrd_T_edges::set_biome_x(int index, ::google::protobuf::int32 value) {
  biome_x_.Set(index, value);
}
inline void DF_wrd_T_edges::add_biome_x(::google::protobuf::int32 value) {
  biome_x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_edges::biome_x() const {
  return biome_x_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_edges::mutable_biome_x() {
  return &biome_x_;
}

// repeated int32 biome_y = 5;
inline int DF_wrd_T_edges::biome_y_size() const {
  return biome_y_.size();
}
inline void DF_wrd_T_edges::clear_biome_y() {
  biome_y_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_edges::biome_y(int index) const {
  return biome_y_.Get(index);
}
inline void DF_wrd_T_edges::set_biome_y(int index, ::google::protobuf::int32 value) {
  biome_y_.Set(index, value);
}
inline void DF_wrd_T_edges::add_biome_y(::google::protobuf::int32 value) {
  biome_y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_edges::biome_y() const {
  return biome_y_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_edges::mutable_biome_y() {
  return &biome_y_;
}

// -------------------------------------------------------------------

// DF_wrd_T_rivers_vertical

// repeated int32 x_min = 1;
inline int DF_wrd_T_rivers_vertical::x_min_size() const {
  return x_min_.size();
}
inline void DF_wrd_T_rivers_vertical::clear_x_min() {
  x_min_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_vertical::x_min(int index) const {
  return x_min_.Get(index);
}
inline void DF_wrd_T_rivers_vertical::set_x_min(int index, ::google::protobuf::int32 value) {
  x_min_.Set(index, value);
}
inline void DF_wrd_T_rivers_vertical::add_x_min(::google::protobuf::int32 value) {
  x_min_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_vertical::x_min() const {
  return x_min_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_vertical::mutable_x_min() {
  return &x_min_;
}

// repeated int32 x_max = 2;
inline int DF_wrd_T_rivers_vertical::x_max_size() const {
  return x_max_.size();
}
inline void DF_wrd_T_rivers_vertical::clear_x_max() {
  x_max_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_vertical::x_max(int index) const {
  return x_max_.Get(index);
}
inline void DF_wrd_T_rivers_vertical::set_x_max(int index, ::google::protobuf::int32 value) {
  x_max_.Set(index, value);
}
inline void DF_wrd_T_rivers_vertical::add_x_max(::google::protobuf::int32 value) {
  x_max_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_vertical::x_max() const {
  return x_max_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_vertical::mutable_x_max() {
  return &x_max_;
}

// repeated int32 active = 3;
inline int DF_wrd_T_rivers_vertical::active_size() const {
  return active_.size();
}
inline void DF_wrd_T_rivers_vertical::clear_active() {
  active_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_vertical::active(int index) const {
  return active_.Get(index);
}
inline void DF_wrd_T_rivers_vertical::set_active(int index, ::google::protobuf::int32 value) {
  active_.Set(index, value);
}
inline void DF_wrd_T_rivers_vertical::add_active(::google::protobuf::int32 value) {
  active_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_vertical::active() const {
  return active_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_vertical::mutable_active() {
  return &active_;
}

// repeated int32 elevation = 4;
inline int DF_wrd_T_rivers_vertical::elevation_size() const {
  return elevation_.size();
}
inline void DF_wrd_T_rivers_vertical::clear_elevation() {
  elevation_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_vertical::elevation(int index) const {
  return elevation_.Get(index);
}
inline void DF_wrd_T_rivers_vertical::set_elevation(int index, ::google::protobuf::int32 value) {
  elevation_.Set(index, value);
}
inline void DF_wrd_T_rivers_vertical::add_elevation(::google::protobuf::int32 value) {
  elevation_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_vertical::elevation() const {
  return elevation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_vertical::mutable_elevation() {
  return &elevation_;
}

// -------------------------------------------------------------------

// DF_wrd_T_rivers_horizontal

// repeated int32 y_min = 1;
inline int DF_wrd_T_rivers_horizontal::y_min_size() const {
  return y_min_.size();
}
inline void DF_wrd_T_rivers_horizontal::clear_y_min() {
  y_min_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_horizontal::y_min(int index) const {
  return y_min_.Get(index);
}
inline void DF_wrd_T_rivers_horizontal::set_y_min(int index, ::google::protobuf::int32 value) {
  y_min_.Set(index, value);
}
inline void DF_wrd_T_rivers_horizontal::add_y_min(::google::protobuf::int32 value) {
  y_min_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_horizontal::y_min() const {
  return y_min_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_horizontal::mutable_y_min() {
  return &y_min_;
}

// repeated int32 y_max = 2;
inline int DF_wrd_T_rivers_horizontal::y_max_size() const {
  return y_max_.size();
}
inline void DF_wrd_T_rivers_horizontal::clear_y_max() {
  y_max_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_horizontal::y_max(int index) const {
  return y_max_.Get(index);
}
inline void DF_wrd_T_rivers_horizontal::set_y_max(int index, ::google::protobuf::int32 value) {
  y_max_.Set(index, value);
}
inline void DF_wrd_T_rivers_horizontal::add_y_max(::google::protobuf::int32 value) {
  y_max_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_horizontal::y_max() const {
  return y_max_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_horizontal::mutable_y_max() {
  return &y_max_;
}

// repeated int32 active = 3;
inline int DF_wrd_T_rivers_horizontal::active_size() const {
  return active_.size();
}
inline void DF_wrd_T_rivers_horizontal::clear_active() {
  active_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_horizontal::active(int index) const {
  return active_.Get(index);
}
inline void DF_wrd_T_rivers_horizontal::set_active(int index, ::google::protobuf::int32 value) {
  active_.Set(index, value);
}
inline void DF_wrd_T_rivers_horizontal::add_active(::google::protobuf::int32 value) {
  active_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_horizontal::active() const {
  return active_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_horizontal::mutable_active() {
  return &active_;
}

// repeated int32 elevation = 4;
inline int DF_wrd_T_rivers_horizontal::elevation_size() const {
  return elevation_.size();
}
inline void DF_wrd_T_rivers_horizontal::clear_elevation() {
  elevation_.Clear();
}
inline ::google::protobuf::int32 DF_wrd_T_rivers_horizontal::elevation(int index) const {
  return elevation_.Get(index);
}
inline void DF_wrd_T_rivers_horizontal::set_elevation(int index, ::google::protobuf::int32 value) {
  elevation_.Set(index, value);
}
inline void DF_wrd_T_rivers_horizontal::add_elevation(::google::protobuf::int32 value) {
  elevation_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_wrd_T_rivers_horizontal::elevation() const {
  return elevation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_wrd_T_rivers_horizontal::mutable_elevation() {
  return &elevation_;
}

// -------------------------------------------------------------------

// DF_world_region_details_result

// repeated int32 biome = 1;
inline int DF_world_region_details_result::biome_size() const {
  return biome_.size();
}
inline void DF_world_region_details_result::clear_biome() {
  biome_.Clear();
}
inline ::google::protobuf::int32 DF_world_region_details_result::biome(int index) const {
  return biome_.Get(index);
}
inline void DF_world_region_details_result::set_biome(int index, ::google::protobuf::int32 value) {
  biome_.Set(index, value);
}
inline void DF_world_region_details_result::add_biome(::google::protobuf::int32 value) {
  biome_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_world_region_details_result::biome() const {
  return biome_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_world_region_details_result::mutable_biome() {
  return &biome_;
}

// repeated int32 elevation = 2;
inline int DF_world_region_details_result::elevation_size() const {
  return elevation_.size();
}
inline void DF_world_region_details_result::clear_elevation() {
  elevation_.Clear();
}
inline ::google::protobuf::int32 DF_world_region_details_result::elevation(int index) const {
  return elevation_.Get(index);
}
inline void DF_world_region_details_result::set_elevation(int index, ::google::protobuf::int32 value) {
  elevation_.Set(index, value);
}
inline void DF_world_region_details_result::add_elevation(::google::protobuf::int32 value) {
  elevation_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_world_region_details_result::elevation() const {
  return elevation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_world_region_details_result::mutable_elevation() {
  return &elevation_;
}

// required .DF_wrd_T_edges edges = 4;
inline bool DF_world_region_details_result::has_edges() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DF_world_region_details_result::set_has_edges() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DF_world_region_details_result::clear_has_edges() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DF_world_region_details_result::clear_edges() {
  if (edges_ != NULL) edges_->::DF_wrd_T_edges::Clear();
  clear_has_edges();
}
inline const ::DF_wrd_T_edges& DF_world_region_details_result::edges() const {
  return edges_ != NULL ? *edges_ : *default_instance_->edges_;
}
inline ::DF_wrd_T_edges* DF_world_region_details_result::mutable_edges() {
  set_has_edges();
  if (edges_ == NULL) edges_ = new ::DF_wrd_T_edges;
  return edges_;
}
inline ::DF_wrd_T_edges* DF_world_region_details_result::release_edges() {
  clear_has_edges();
  ::DF_wrd_T_edges* temp = edges_;
  edges_ = NULL;
  return temp;
}

// required .DF_coord2d pos = 5;
inline bool DF_world_region_details_result::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DF_world_region_details_result::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DF_world_region_details_result::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DF_world_region_details_result::clear_pos() {
  if (pos_ != NULL) pos_->::DF_coord2d::Clear();
  clear_has_pos();
}
inline const ::DF_coord2d& DF_world_region_details_result::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::DF_coord2d* DF_world_region_details_result::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::DF_coord2d;
  return pos_;
}
inline ::DF_coord2d* DF_world_region_details_result::release_pos() {
  clear_has_pos();
  ::DF_coord2d* temp = pos_;
  pos_ = NULL;
  return temp;
}

// required .DF_wrd_T_rivers_vertical rivers_vertical = 6;
inline bool DF_world_region_details_result::has_rivers_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DF_world_region_details_result::set_has_rivers_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DF_world_region_details_result::clear_has_rivers_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DF_world_region_details_result::clear_rivers_vertical() {
  if (rivers_vertical_ != NULL) rivers_vertical_->::DF_wrd_T_rivers_vertical::Clear();
  clear_has_rivers_vertical();
}
inline const ::DF_wrd_T_rivers_vertical& DF_world_region_details_result::rivers_vertical() const {
  return rivers_vertical_ != NULL ? *rivers_vertical_ : *default_instance_->rivers_vertical_;
}
inline ::DF_wrd_T_rivers_vertical* DF_world_region_details_result::mutable_rivers_vertical() {
  set_has_rivers_vertical();
  if (rivers_vertical_ == NULL) rivers_vertical_ = new ::DF_wrd_T_rivers_vertical;
  return rivers_vertical_;
}
inline ::DF_wrd_T_rivers_vertical* DF_world_region_details_result::release_rivers_vertical() {
  clear_has_rivers_vertical();
  ::DF_wrd_T_rivers_vertical* temp = rivers_vertical_;
  rivers_vertical_ = NULL;
  return temp;
}

// required .DF_wrd_T_rivers_horizontal rivers_horizontal = 7;
inline bool DF_world_region_details_result::has_rivers_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DF_world_region_details_result::set_has_rivers_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DF_world_region_details_result::clear_has_rivers_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DF_world_region_details_result::clear_rivers_horizontal() {
  if (rivers_horizontal_ != NULL) rivers_horizontal_->::DF_wrd_T_rivers_horizontal::Clear();
  clear_has_rivers_horizontal();
}
inline const ::DF_wrd_T_rivers_horizontal& DF_world_region_details_result::rivers_horizontal() const {
  return rivers_horizontal_ != NULL ? *rivers_horizontal_ : *default_instance_->rivers_horizontal_;
}
inline ::DF_wrd_T_rivers_horizontal* DF_world_region_details_result::mutable_rivers_horizontal() {
  set_has_rivers_horizontal();
  if (rivers_horizontal_ == NULL) rivers_horizontal_ = new ::DF_wrd_T_rivers_horizontal;
  return rivers_horizontal_;
}
inline ::DF_wrd_T_rivers_horizontal* DF_world_region_details_result::release_rivers_horizontal() {
  clear_has_rivers_horizontal();
  ::DF_wrd_T_rivers_horizontal* temp = rivers_horizontal_;
  rivers_horizontal_ = NULL;
  return temp;
}

// required int32 lava_stone = 8;
inline bool DF_world_region_details_result::has_lava_stone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DF_world_region_details_result::set_has_lava_stone() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DF_world_region_details_result::clear_has_lava_stone() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DF_world_region_details_result::clear_lava_stone() {
  lava_stone_ = 0;
  clear_has_lava_stone();
}
inline ::google::protobuf::int32 DF_world_region_details_result::lava_stone() const {
  return lava_stone_;
}
inline void DF_world_region_details_result::set_lava_stone(::google::protobuf::int32 value) {
  set_has_lava_stone();
  lava_stone_ = value;
}

// repeated int32 elevation2 = 9;
inline int DF_world_region_details_result::elevation2_size() const {
  return elevation2_.size();
}
inline void DF_world_region_details_result::clear_elevation2() {
  elevation2_.Clear();
}
inline ::google::protobuf::int32 DF_world_region_details_result::elevation2(int index) const {
  return elevation2_.Get(index);
}
inline void DF_world_region_details_result::set_elevation2(int index, ::google::protobuf::int32 value) {
  elevation2_.Set(index, value);
}
inline void DF_world_region_details_result::add_elevation2(::google::protobuf::int32 value) {
  elevation2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DF_world_region_details_result::elevation2() const {
  return elevation2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DF_world_region_details_result::mutable_elevation2() {
  return &elevation2_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_world_5fregion_5fdetails_5fresult_2eproto__INCLUDED
